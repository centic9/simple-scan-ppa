From: Ural Tunaboyu <ural.tunaboyu@canonical.com>
Date: Tue, 8 Jul 2025 13:16:22 -0700
Subject: postprocessing: move to separate step after saving and handle errors

Bug-Ubuntu: https://launchpad.net/bugs/2112619

Cherry-pick fixes from upstream where postprocessing errors were showing up as
save errors even when saving was finished successfully. Moved postprocessing to
its own step so errors show up as postprocessing failures and not save
failures. Also fixed postprocessing printing script output and errors
incorrectly.

---
 src/app-window.vala    | 21 +++++++++++++++++----
 src/book.vala          | 18 +++++++++++++-----
 src/postprocessor.vala |  4 ++--
 3 files changed, 32 insertions(+), 11 deletions(-)

diff --git a/src/app-window.vala b/src/app-window.vala
index efd5426..9f03c0a 100644
--- a/src/app-window.vala
+++ b/src/app-window.vala
@@ -627,8 +627,6 @@ public class AppWindow : Adw.ApplicationWindow
         try
         {
             yield book.save_async (mime_type, settings.get_int ("jpeg-quality"), file,
-                settings.get_boolean ("postproc-enabled"), settings.get_string ("postproc-script"),
-                settings.get_string ("postproc-arguments"), settings.get_boolean ("postproc-keep-original"),
                 (fraction) =>
             {
                 progress_bar.set_fraction (fraction);
@@ -647,6 +645,20 @@ public class AppWindow : Adw.ApplicationWindow
         save_button.sensitive = true;
         progress_bar.remove_with_delay (500, action_bar);
 
+        try
+        {
+            yield book.postprocess_async (
+                mime_type, file, settings.get_boolean ("postproc-enabled"), settings.get_string ("postproc-script"),
+                settings.get_string ("postproc-arguments"), settings.get_boolean ("postproc-keep-original"));
+        }
+        catch (Error e)
+        {
+            warning ("Error running postprocessing: %s", e.message);
+            show_error_dialog (/* Title of error dialog when postprocessing failed */
+                              _("Failed to run postprocessing"),
+                              e.message);
+        }
+
         book_needs_saving = false;
         book_uri = uri;
         return true;
@@ -1176,9 +1188,10 @@ public class AppWindow : Adw.ApplicationWindow
             }
             var file = File.new_for_path (Path.build_filename (dir, filename));
             yield book.save_async (mime_type, settings.get_int ("jpeg-quality"), file,
-                settings.get_boolean ("postproc-enabled"), settings.get_string ("postproc-script"),
-                settings.get_string ("postproc-arguments"), settings.get_boolean ("postproc-keep-original"),
                 null, null);
+            yield book.postprocess_async (mime_type, file, settings.get_boolean ("postproc-enabled"),
+                settings.get_string ("postproc-script"), settings.get_string ("postproc-arguments"),
+                settings.get_boolean ("postproc-keep-original"));
             var command_line = "xdg-email";
             if (mime_type == "application/pdf")
                 command_line += " --attach %s".printf (file.get_path ());
diff --git a/src/book.vala b/src/book.vala
index 2970270..f1ca089 100644
--- a/src/book.vala
+++ b/src/book.vala
@@ -163,14 +163,20 @@ public class Book : Object
     }
 
     public async void save_async (string mime_type, int quality, File file,
-        bool postproc_enabled, string postproc_script, string postproc_arguments, bool postproc_keep_original,
         ProgressionCallback? progress_cb, Cancellable? cancellable = null) throws Error
     {
         var book_saver = new BookSaver ();
         yield book_saver.save_async (this, mime_type, quality, file,
-            postproc_enabled, postproc_script, postproc_arguments, postproc_keep_original,
             progress_cb, cancellable);
     }
+
+    public async void postprocess_async (string mime_type, File file, bool postproc_enabled,
+        string postproc_script, string postproc_arguments, bool postproc_keep_original) throws Error
+        {
+            var book_saver = new BookSaver ();
+            yield book_saver.postprocess_async (mime_type, file, postproc_enabled,
+                postproc_script, postproc_arguments, postproc_keep_original);
+        }
 }
 
 private class BookSaver
@@ -192,7 +198,6 @@ private class BookSaver
      * the ui can continue operating. The method then return once saving
      * is completed, cancelled, or failed */
     public async void save_async (Book book, string mime_type, int quality, File file,
-        bool postproc_enabled, string postproc_script, string postproc_arguments, bool postproc_keep_original,
         ProgressionCallback? progression_callback, Cancellable? cancellable) throws Error
     {
         var timer = new Timer ();
@@ -275,10 +280,14 @@ private class BookSaver
 
         timer.stop ();
         debug ("Save time: %f seconds", timer.elapsed (null));
+    }
 
+    public async void postprocess_async(string mime_type, File file, bool postproc_enabled,
+        string postproc_script, string postproc_arguments, bool postproc_keep_original) throws Error
+    {
         if ( postproc_enabled && postproc_script.length != 0 ) {
         /* Perform post-processing */
-            timer = new Timer ();
+            var timer = new Timer ();
             var return_code = postprocessor.process(postproc_script,
                                                     mime_type,              // MIME Type
                                                     postproc_keep_original, // Keep Original
@@ -291,7 +300,6 @@ private class BookSaver
             timer.stop ();
             debug ("Postprocessing time: %f seconds", timer.elapsed (null));
         }
-
     }
 
     /* Those methods are run in the encoder threads pool. It process
diff --git a/src/postprocessor.vala b/src/postprocessor.vala
index 2d036c9..74d95fa 100644
--- a/src/postprocessor.vala
+++ b/src/postprocessor.vala
@@ -35,9 +35,9 @@ public class Postprocessor {
 						out process_status);
 	    debug ("status: %d\n", process_status);
 	    debug ("STDOUT: \n");
-	    debug ("process_stdout");
+	    debug (process_stdout);
 	    debug ("STDERR: \n");
-	    debug ("process_stderr");
+	    debug (process_stderr);
 
 	    return process_status;
     }
